// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: log_collector/log_collector.proto

package log_collector

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CollectOneReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CollectOneReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectOneReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CollectOneReqMultiError, or
// nil if none found.
func (m *CollectOneReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectOneReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetModule()) < 1 {
		err := CollectOneReqValidationError{
			field:  "Module",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMeetingId()) < 1 {
		err := CollectOneReqValidationError{
			field:  "MeetingId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := CollectOneReqValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Timestamp

	// no validation rules for Info

	if len(errors) > 0 {
		return CollectOneReqMultiError(errors)
	}

	return nil
}

// CollectOneReqMultiError is an error wrapping multiple validation errors
// returned by CollectOneReq.ValidateAll() if the designated constraints
// aren't met.
type CollectOneReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectOneReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectOneReqMultiError) AllErrors() []error { return m }

// CollectOneReqValidationError is the validation error returned by
// CollectOneReq.Validate if the designated constraints aren't met.
type CollectOneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectOneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectOneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectOneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectOneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectOneReqValidationError) ErrorName() string { return "CollectOneReqValidationError" }

// Error satisfies the builtin error interface
func (e CollectOneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectOneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectOneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectOneReqValidationError{}

// Validate checks the field values on CollectOneResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CollectOneResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectOneResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CollectOneRespMultiError,
// or nil if none found.
func (m *CollectOneResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectOneResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return CollectOneRespMultiError(errors)
	}

	return nil
}

// CollectOneRespMultiError is an error wrapping multiple validation errors
// returned by CollectOneResp.ValidateAll() if the designated constraints
// aren't met.
type CollectOneRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectOneRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectOneRespMultiError) AllErrors() []error { return m }

// CollectOneRespValidationError is the validation error returned by
// CollectOneResp.Validate if the designated constraints aren't met.
type CollectOneRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectOneRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectOneRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectOneRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectOneRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectOneRespValidationError) ErrorName() string { return "CollectOneRespValidationError" }

// Error satisfies the builtin error interface
func (e CollectOneRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectOneResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectOneRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectOneRespValidationError{}

// Validate checks the field values on CollectBatchReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CollectBatchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectBatchReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectBatchReqMultiError, or nil if none found.
func (m *CollectBatchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectBatchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CollectBatchReqValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CollectBatchReqValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CollectBatchReqValidationError{
					field:  fmt.Sprintf("Logs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CollectBatchReqMultiError(errors)
	}

	return nil
}

// CollectBatchReqMultiError is an error wrapping multiple validation errors
// returned by CollectBatchReq.ValidateAll() if the designated constraints
// aren't met.
type CollectBatchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectBatchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectBatchReqMultiError) AllErrors() []error { return m }

// CollectBatchReqValidationError is the validation error returned by
// CollectBatchReq.Validate if the designated constraints aren't met.
type CollectBatchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectBatchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectBatchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectBatchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectBatchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectBatchReqValidationError) ErrorName() string { return "CollectBatchReqValidationError" }

// Error satisfies the builtin error interface
func (e CollectBatchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectBatchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectBatchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectBatchReqValidationError{}

// Validate checks the field values on CollectBatchResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CollectBatchResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectBatchResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectBatchRespMultiError, or nil if none found.
func (m *CollectBatchResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectBatchResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return CollectBatchRespMultiError(errors)
	}

	return nil
}

// CollectBatchRespMultiError is an error wrapping multiple validation errors
// returned by CollectBatchResp.ValidateAll() if the designated constraints
// aren't met.
type CollectBatchRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectBatchRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectBatchRespMultiError) AllErrors() []error { return m }

// CollectBatchRespValidationError is the validation error returned by
// CollectBatchResp.Validate if the designated constraints aren't met.
type CollectBatchRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectBatchRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectBatchRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectBatchRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectBatchRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectBatchRespValidationError) ErrorName() string { return "CollectBatchRespValidationError" }

// Error satisfies the builtin error interface
func (e CollectBatchRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectBatchResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectBatchRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectBatchRespValidationError{}

// Validate checks the field values on Log with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Log) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Log with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LogMultiError, or nil if none found.
func (m *Log) ValidateAll() error {
	return m.validate(true)
}

func (m *Log) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetModule()) < 1 {
		err := LogValidationError{
			field:  "Module",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMeetingId()) < 1 {
		err := LogValidationError{
			field:  "MeetingId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := LogValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Timestamp

	// no validation rules for Info

	if len(errors) > 0 {
		return LogMultiError(errors)
	}

	return nil
}

// LogMultiError is an error wrapping multiple validation errors returned by
// Log.ValidateAll() if the designated constraints aren't met.
type LogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogMultiError) AllErrors() []error { return m }

// LogValidationError is the validation error returned by Log.Validate if the
// designated constraints aren't met.
type LogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogValidationError) ErrorName() string { return "LogValidationError" }

// Error satisfies the builtin error interface
func (e LogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogValidationError{}
